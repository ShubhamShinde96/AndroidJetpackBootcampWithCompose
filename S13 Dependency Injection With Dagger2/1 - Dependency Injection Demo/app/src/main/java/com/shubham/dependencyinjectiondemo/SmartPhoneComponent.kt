package com.shubham.dependencyinjectiondemo

import dagger.Component
import javax.inject.Singleton

//@Component
@Singleton
@Component(modules = [MemoryCardModule::class, NCBatteryModule::class]) // here we need to link our MemoryCardModule to this component, now rebuild the project to generate dagger related classes.
interface SmartPhoneComponent {

    // Return type of the function must be the type of dependency required.

//    fun getSmartPhone() : SmartPhone // commented because of lesson 101 to learn field injection

    // When generating code for dependency injection the dagger will only consider it's return type.

    // Rebuild the project once, cause dagger might not have been generated the code yet, by  rebuilding the project
    // we can get them generated by dagger.

    // after rebuilding you can see the generated classes in java(generated) packages.


    // *************************************************************************************

    // here we need to link our MemoryCardModule to this component

    // ************************************************************************************

//    fun getSmartPhone() : SmartPhone // We don't need to write getter methods like this.
    // Actually, we can get injected all the dependencies belong to the dependency graph.
    // Now we're creating an abstract inject function for the MainActivity.

    fun inject(mainActivity: MainActivity) // We have used inject as a function name but you can use any name you like.
    // but we use name inject as the name of the injector function.
    // We're going to use this function for the main activity that's why we have added an instance of main activity as a parameter.
    // In case you need to use this component in 3 activities and one fragment then you may need to write 3/4 more inject function here with those activities and fragments as a parameter

}